# Вариант 1: Использование официального образа с уже установленным native-image
FROM ghcr.io/graalvm/native-image-community:24 AS build

# Установка Maven
ENV MAVEN_HOME=/opt/maven
ENV PATH="${MAVEN_HOME}/bin:${PATH}"
RUN microdnf install -y curl tar gzip && \
    curl -fsSL https://archive.apache.org/dist/maven/maven-3/3.9.9/binaries/apache-maven-3.9.9-bin.tar.gz | \
    tar -xzf - -C /opt && \
    mv /opt/apache-maven-3.9.9 /opt/maven && \
    microdnf clean all

# Создаём системного пользователя
RUN useradd -r -m -u 1001 -U -d /home/myuser -s /bin/bash myuser && \
    mkdir -p /usr/src/app && \
    chown myuser:myuser /usr/src/app

WORKDIR /usr/src/app
USER myuser

# Копируем исходники
COPY --chown=myuser:myuser . .

# Проверяем что native-image доступен
RUN native-image --version

# Собираем native-бинарник
RUN mvn clean package -Pnative -DskipTests --settings settings.xml

# Run stage: запуск без JVM
FROM alpine:3.21 AS run

# Устанавливаем системные библиотеки
RUN apk add --no-cache libc6-compat libstdc++

# Создаём системного пользователя и группу
RUN addgroup -S myuser && adduser -S -G myuser myuser && \
    mkdir -p /app && \
    chown myuser:myuser /app

USER myuser
WORKDIR /app

# Копируем native-бинарник
COPY --from=build --chown=myuser:myuser /usr/src/app/target/solo-leveling-gateway-service /app/app

EXPOSE 8080
CMD ["./app", "-Dspring.profiles.active=prod"]